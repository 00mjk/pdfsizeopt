# by pts@fazekas.hu at Fri Mar 27 22:37:48 CET 2009

* gs -sDEVICE=pdfwrite can do Type1C font embedding --> great reduction for small PDFs
* PDF tools including compression:
  http://multivalent.sourceforge.net/Tools/index.html
  old (2006-01-02)
  -max and -compact can only be read by Mulivalent tools
    bzip2, very small; file format details:
    http://multivalent.sourceforge.net/Research/CompactPDF.html
    white paper (2003) http://portal.acm.org/citation.cfm?id=958220.958253
  ?? does it recompress images?
  converts fn.pdf to fn-o.pdf  (makes it much smaller)
  SUXX: java -cp Multivalent.jar tool.pdf.Compress texbook.9.2.pdf
  texbook.9.2.pdf: java.lang.ArrayIndexOutOfBoundsException: 1820
  * good idea to compress fn.9.0.pdf to fn.9.0-o.pdf, to PDF1.5 with object
    compression
* is there a tool for Type1C (CFF) font conversion in PDF?
* \cite (2004)
  Creative use of PDF files in L A T E X environments
  http://www.tu-chemnitz.de/urz/anwendungen/tex/stammtisch/chronik/pdf_interna.pdf - 
* Ubuntu Hardy has latest pdftk 1.41
  pdftk texbook.9.0.pdf output texbook.9.0.tk.pdf compress
  only compresses the page stream a little bit
* http://www.egregorion.net/servicemenu-pdf/
  various operations on PDf
* concatenation requires gs (\cite my eurotex2007 article with .ps hack)
* -dPDFSETTINGS=/printer : embed all fonts (see docs at http://pages.cs.wisc.edu/~ghost/doc/cvs/Ps2pdf.htm)
* pdftex type1c http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=424404
* http://www.adobe.com/devnet/acrobat/pdfs/pdf_reference_1-7.pdf
* TODO: how \pdfcompresslevel affects the effectiveness of Multivalent?
* TODO: how to recompress inline images? What is the sam2p default?
* TODO: does Multivalent recompress images? try...
* TODO: do sam2p-produced inline images remain inline images with pdftex,
  without recompression? [unchanged, kept RLE by pdftex] what if Multivalent?
  [unchanged, kept RLE by Multivalent]
  pdftex doesn't recompress or change BitsPerComponent, colorspace, filter etc.
  of /XObject
  multivalent doesn't change the BitsPerComponent or colorspace, but it
  changes the filter from none or RLE to /FlateDecode (TODO: what about LZW or
  fax?), but it keeps /DCTDecode.
  SUXX: TODO: multivalent is buggy, it removes the whole /DecodeParms,
  including the /Predictor, but it doesn't
  reencode the image; it also removes an unknown /Filter/FooDecode
* TODO: experiment with PNG and TIFF predictors -- will we gain size by
  default? or should the user do it?
* TODO: use standard PNG tools (or pnmtopng -- does it optimize? yes, it
  seems to find out number of bits; creates PNG smaller than sam2p) if
  available to achieve superior (?) compression
* doc: which version of pdftex used and why?
* TODO: how to fix images after reencoding with gs -sDEVICE=pdfwrite?
  (use my Perl script?)
* (from pnmtopng.c)
  PNG allows only depths of 8 and 16 for a truecolor image
  and for a grayscale image with an alpha channel.
* create small PNG: png_create_write_struct (PNG_LIBPNG_VER_STRING,
  &pnmtopng_jmpbuf_struct, pnmtopng_error_handler, NULL);
* similar to sam2p (EPS and PDF output): http://bmeps.sf.net/
* TODO: first RLEEncode, then FlateEncode
* doc: pdfconcat (does it keep hyperlinks? does anything keep hyperlinks?
  document our gs script: lme2006/art/02typeset/pdfconcatlinks.ps)
* lme2006 was latex + dvips + gs -sDEVICE=pdfwrite
* eurotex2006 was pdflatex + pdfconcat
* doc: converting large images needs lots of memory (for tool.pdf.Compress,
  the image stream must fit to memory)
* png2pdf 1.0.12: 2006-07-11
* TODO: meps.sf.net png2pdf.net: does it decompress PNG? Yes.
* http://en.wikipedia.org/wiki/Portable_Network_Graphics
  The current version of IrfanView can use PNGOUT as an external plug-in,
  obviating the need for a separate compressor.
* However, IrfanView doesn't support transparency, so the image compression
  with IrfanView isn't guaranteed to be lossless. There is also a freeware GUI
  frontend to PNGOUT known as PNGGauntlet.
* pngout.exe is not open source; 11/20/2008
  * amazingly small: 11/20/2008 version: 40960 bytes
  * has variouse flags tuning speed and compression parameters
  * description of flags: http://advsys.net/ken/util/pngout.htm
  out of memory for very large images: lme_v6/00001.png: PNG image data, 17382 x 23547, 1-bit grayscale, non-interlaced
  very slow:
  $ file lme_v6/600dpi_00001.png
  lme_v6/600dpi_00001.png: PNG image data, 5794 x 7849, 1-bit grayscale, non-interlaced
  $ time wine ./pngout.exe lme_v6/600dpi_00001{,.pngout}.png
  In:   78862 bytes               lme_v6/600dpi_00001.png /c0 /f0 /d1
  Out:                             lme_v6/600dpi_00001.pngout.png /c3 /f0 /d1, 2 c
  Out:   54135 bytes               
  Chg:  -24727 bytes ( 68% of original)
  real	6m48.734s
  user	6m32.473s
  sys	0m2.480s
  old linux version available (20070430)
  http://static.jonof.id.au/dl/kenutils/pngout-20070430-linux-static.tar.gz
  only free to use: http://www.advsys.net/ken/utils.htm#pngoutkziplicense
  * seems to do color space conversion
  $ time ./pngout-linux-pentium4-static lme_v6/300dpi_00001.rgb8{,.pngout}.png
  In:34118768 bytes               lme_v6/300dpi_00001.rgb8.png /c2 /f0
  Out:                            lme_v6/300dpi_00001.rgb8.pngout.png /c3 /f0 /d1
  Out:   19817 bytes               
  Chg:-34098951 bytes (  0% of original)
  real	0m47.100s
  user	0m46.803s
  sys	0m0.248s
  $ time ./pngout-linux-pentium4-static lme_v6/300dpi_00008{,.pngout}.png
  In:  124462 bytes               lme_v6/300dpi_00008.png /c0 /f0 /d1
  Out:                             lme_v6/300dpi_00008.pngout.png /c3 /f0 /d1, 2 c
  Out:  107256 bytes               
  Chg:  -17206 bytes ( 86% of original)
  real	0m58.512s
  user	0m58.192s
  sys	0m0.244s
  $ time sam2p -pdf:2 lme_v6/00008.png lme_v6/00008.sam2p.pdf
  This is sam2p v0.45-3.
  Available Loaders: PS PDF JAI PNG JPEG TIFF PNM BMP GIF LBM XPM PCX TGA.
  Available Appliers: XWD Meta Empty BMP PNG TIFF6 TIFF6-JAI JPEG-JAI JPEG PNM
  GIF89a+LZW XPM PSL1C PSL23+PDF PSL2+PDF-JAI P-TrOpBb.
  sam2p: Notice: PNM: loaded alpha, but no transparent pixels
  sam2p: Notice: job: read InputFile: lme_v6/00008.png
  sam2p: Notice: writeTTT: using template: p02
  sam2p: Notice: applyProfile: applied OutputRule #4
  sam2p: Notice: job: written OutputFile: lme_v6/00008.sam2p.pdf
  Success.

  real	1m16.780s
  user	1m9.492s
  sys	0m6.632s
  $ time java -cp Multivalent.jar tool.pdf.Compress lme_v6/00008.sam2p.pdf
  file:/home/kat/mix/trunk/pdfsize/lme_v6/00008.sam2p.pdf, 1419665 bytes
  additional compression may be possible with:
           -compact -jpeg
  => new length = 1246436, saved 12%, elapsed time = 13 sec

  real	0m14.039s
  user	0m13.705s
  sys	0m0.356s
  $ time ./optipng lme_v6/00008.optipng.png 
  OptiPNG 0.6.2: Advanced PNG optimizer.
  Copyright (C) 2001-2008 Cosmin Truta.

  ** Processing: lme_v6/00008.optipng.png
  17382x23547 pixels, 1 bit/pixel, grayscale
  Input IDAT size = 1371588 bytes
  Input file size = 1373711 bytes
  Trying:
    zc = 9  zm = 8  zs = 0  f = 0		IDAT size = 1246754
    zc = 9  zm = 8  zs = 1  f = 0		IDAT size = 1241149
    zc = 9  zm = 8  zs = 0  f = 5		IDAT size = 1090056
    zc = 9  zm = 8  zs = 1  f = 5		IDAT size = 1085643
                                          
  Selecting parameters:
    zc = 9  zm = 8  zs = 1  f = 5		IDAT size = 1085643

  Output IDAT size = 1085643 bytes (285945 bytes decrease)
  Output file size = 1085762 bytes (287949 bytes = 21.02% decrease)
  real	2m28.465s
  user	2m27.521s
  sys	0m0.560s
  * optipng uses very little memory (50M for 00008.png), it doesn't read the
    whole PNG input image to memory.
* TODO: JPEG optimization
* http://lyncd.com/2009/03/imgopt-lossless-optimize-png-jpeg/
  shell script using jpegtran, optipng, advpng and pngout
* OptiPNG is a PNG optimizer that recompresses image files to a smaller
  size, without losing any information. This program also converts external
  formats (BMP, GIF, PNM and TIFF) to optimized PNG, and performs PNG
  integrity checks and corrections.
  If you wish to learn how PNG optimization is done, or to know about other
  similar tools, read the PNG-Tech article "A guide to PNG optimization". 
  (optipng is a redesign of pngcrush)
  * At the time of this writing, AdvPNG does not perform image reductions,
    so the use of pngrewrite or OptiPNG prior to optimiziation may be
    necessary. However, given the effectivenes of 7-Zip deflation, AdvanceCOMP
    is a powerful contender.
  * contains minitiff.c and tiffread.c for reading TIFF files
  * can process large images: 17382x23547 pixels, 1 bit/pixel, grayscale
* TODO: \cite PNG optimization  http://optipng.sourceforge.net/pngtech/optipng.html
  lists ll relevant tools
* Latest version: OptiPNG 0.6.2 (released on 9 Nov 2008). 
* SUXX: advpng in advancecomp-1.15 doesn't support 1-bit grayscale
  lme_v6/300dpi_00008.advpng-4.png (Unsupported bit depth/color type, 1/0)
* ultimate data compression comparison: http://uclc.info/
  TODO: Google, includes PAQ: slow, but emits small file
* TODO: unused palette color optimization for PDF images
  (pngout does it, optipng doesn't do it)
* TODO: convert-indexed-to-grayscale optimization for PDF images
  (pngout or optipng doesn't do it, optipng doesn't do it)
* TODO: single-color image optimization
* TODO: How to optimize a PDF image object
  TODO: doc: dependencies: Ghostscript, sam2p, pngtopnm, pngout, jbig2
  0. Let the original PDF XImage object be orig.pdfimg .
  1. Create v0.pdfimg from orig.pdfimg by keeping only /Width, /Height,
     /ColorSpace, /BitsPerComponent, /Filter and /DecodeParms and the
     compressed stream. Convert ``/ImageMask true'' to /ColorSpace /DeviceGray.
  2. If the /Filter contains /JPXDecode or /DCTDecode, then
     stop and use v0.pdfimg . (Imp: eliminate /ASCIIHexDecode and
     /ASCII85Decode, also later)
  3. If /ColorSpace is not /DeviceRGB, /DeviceGray or /Indexed of /DeviceRGB
     or /DeviceGray, then stop and use v0.pdfimg . (Imp: /DeviceCMYK, but
     PNG has no support for this).
  4. If /BitsPerComponent is greater than 8, then stop and use v0.pdfimg .
  5. If /Mask is present and it's nonempty, then stop and use v0.pdfimg
     (Imp: easy support for non-indexed /DeviceRGB and /DeviceGray: convert
     the /Mask to RGB8, remove it, and add it back (properly converted back) to
     the final PDF; pay attention to /Decode differences as well.)
  6. Render v0.pdfimg with Ghostscript to -sDEVICE=ppmraw,
     ``/Interpolate false''
     (or -sDEVICE=pgmraw if /DeviceGray or /Indexed/DeviceGray)
     (Imp: maybe -sDEVICE=pdfwrite with
     the appropriate setpagedevice to produce something uncompressed that
     sam2p understands directly.)
  7. Convert the rendered PNM with sam2p to PDF XObject (-pdf:2 PDF1.2:).
     Use the -s option to prevent the creation of a single-color image
     without an image XObject.
     sam2p by default does:
     * removing unused colors from the palette
     * picking the smallest /ColorSpace and /BitsPerComponent (== SampleFormat)
     * using ZIP compression (/FlateDecode)
     (Imp: improve the /FlateDecode predictor selection algorithm of sam2p)
  8. Extract the image XObject from the PDF created by sam2p to v1.pdfimg .
  9. Convert the rendered PNM with sam2p to PNG. (Imp: optimize with
     SampleFormat RGB1, RGB2 and RGB4) (Imp: if BitsPerComponent is not 8,
     do an alternate conversion, specifing only 8-bit SampleFormats)
  10. Use pngout (or optipng, if pdfout is not available). (Imp: with some
      flags: optipng -o5) (Imp: use pnmtopng, which creates a little bit
      smaller PNG than sam2p because it chooses better predictors)
      (Imp: for some very large images (what is the limit?), pdfout runs out
      of memory (malloc fails) -- prevent that, and use optipng)
  11. Extract the new /Width, /Height, /ColorSpace and /BitsPerComponent
      values from the PNG header, and the palette from the PNG PLTE chunk.
  12. Create v2.pdfimg from v0.pdfimg by replacing /Width, /Height,
      /ColorSpace and /BitsPerComponent from the values extracted above,
      adding the corresponding PNG /DecodeParms, /Filter /FlateDecode and
      replacing the image stream with the contents of the PNG IDAT chunk.
      (Imp: experiment size reduction with /DecodeParms and image data being
      out of sync.) This operation is fast, because no recoding or
      recompression takes place.
  13. If /BitsPerComponent is 1, create v3.pdfimg from sam2p's PNG output
      and converting it to /JBIG2Decode using the open source `jbig2' tool.
  14. Pick the smallest of v*.pdfimg created above.
  15. If not v0.pdfimg was picked, then create the output by taking
      orig.pdfimg and replacing /ColorSpace, /BitsPerComponent,
      /DecodeParms, /Filter and the image stream. Verify that /Width and
      /Height of orig.pdf and the v*.pdfimg picked match. Pay attention to
      changed /Decode values, and /ImageMask and palette conversions.
      (Imp: apply the /Mask color interval, if appropriate.)
  +16. Find identical images in the PDF file, and unify them.
  +17. Find identical palettes and move them to an object.
* TODO: prevent tool.pdf.Compress from decompressing, and/or recompressing
  the image XObjects we have created
* doc: none of the tools optimize inline images (TODO?), so please don't use
  sam2p (by default) to embed them, use sam2p -pdf:2 to create image
  XObjects.
* TODO: measure PNG/PDF image size reduction compared to tool.pdf.Compress
* http://prdownloads.sourceforge.net/libpng/libpng-1.2.16.tar.bz2
* pngwutil.c
  png_write_find_filter  (finds a filter for the current row)
    The prediction method we use is to find which method provides the
    smallest value when summing the absolute values of the distances
    from zero, using anything >= 128 as negative numbers.  This is known
    as the "minimum sum of absolute differences" heuristic.  Other
    heuristics are the "weighted minimum sum of absolute differences"
    (experimental and can in theory improve compression), and the "zlib
    predictive" method (not implemented yet), which does test compressions
    of lines using different filter methods, and then chooses the
    (series of) filter(s) that give minimum compressed data size (VERY
    computationally expensive).
* gs -sDEVICE=ppmraw doesn't change any pixel value
* TODO: sam2p /Filter array ==> /DecodeParams should be a similar array
* TODO: why is the sam2p predictor consistently larger than the nonpredictor
  in lme_v6/300dpi_all.pdf ?
* ./type1cconv.py lme_v6/empty_page.pdf 
info: optimized image XObject 1 best_method=4 file_name=type1cconv-1.pngout.png  size=20000 (63%)
info: replacements are {1: 71448, 2: 25368, 3: 25943, 4: 20000} <= 31827 bytes
info: optimized image XObject 6 best_method=4 file_name=type1cconv-6.pngout.png  size=30453 (73%)
info: replacements are {1: 92313, 2: 36256, 3: 37044, 4: 30453} <= 41589 bytes
info: optimized image XObject 10 best_method=4 file_name=type1cconv-10.pngout.png  size=62584 (80%)
info: replacements are {1: 145040, 2: 71281, 3: 71123, 4: 62584} <= 77822 bytes
info: optimized image XObject 14 best_method=4 file_name=type1cconv-14.pngout.png  size=15611 (62%)
info: replacements are {1: 63576, 2: 20613, 3: 20514, 4: 15611} <= 25030 bytes
info: optimized image XObject 18 best_method=4 file_name=type1cconv-18.pngout.png  size=37037 (76%)
info: replacements are {1: 98083, 2: 43685, 3: 42789, 4: 37037} <= 48694 bytes
info: optimized image XObject 22 best_method=4 file_name=type1cconv-22.pngout.png  size=1668 (19%)
info: replacements are {1: 42650, 2: 5052, 3: 5090, 4: 1668} <= 8614 bytes
info: optimized image XObject 26 best_method=4 file_name=type1cconv-26.pngout.png  size=76605 (82%)
info: replacements are {1: 161343, 2: 85964, 3: 84647, 4: 76605} <= 92913 bytes
info: optimized image XObject 31 best_method=4 file_name=type1cconv-31.pngout.png  size=105073 (84%)
info: replacements are {1: 204348, 2: 116765, 3: 114193, 4: 105073} <= 124411 bytes
info: optimized image XObject 35 best_method=4 file_name=type1cconv-35.pngout.png  size=72229 (82%)
info: replacements are {1: 154129, 2: 81512, 3: 80321, 4: 72229} <= 87722 bytes
info: optimized image XObject 39 best_method=4 file_name=type1cconv-39.pngout.png  size=77050 (83%)
info: replacements are {1: 236762, 2: 84980, 3: 99845, 4: 77050} <= 92476 bytes
...
info: optimized image XObject 72 best_method=4 file_name=type1cconv-72.pngout.png  size=73335 (82%)
info: replacements are {1: 173074, 2: 82009, 3: 84978, 4: 73335} <= 89180 bytes
info: optimized image XObject 76 best_method=4 file_name=type1cconv-76.pngout.png  size=45594 (78%)
info: replacements are {1: 115776, 2: 52471, 3: 52603, 4: 45594} <= 58737 bytes
info: optimized image XObject 81 best_method=4 file_name=type1cconv-81.pngout.png  size=87807 (83%)
info: replacements are {1: 177788, 2: 97827, 3: 96149, 4: 87807} <= 105321 bytes
info: optimized image XObject 85 best_method=4 file_name=type1cconv-85.pngout.png  size=104283 (85%)
info: replacements are {1: 204822, 2: 115707, 3: 112802, 4: 104283} <= 123369 bytes
info: optimized image XObject 89 best_method=4 file_name=type1cconv-89.pngout.png  size=61667 (81%)
info: replacements are {1: 141101, 2: 69353, 3: 69315, 4: 61667} <= 75941 bytes
info: saving PDF to: lme_v6/300dpi_all.type1c.pdf
info: generated 1420015 bytes (82%)

real	40m7.868s
user	38m45.777s
sys	0m42.015s
* TODO: tool.pdf.Compress increases the image size
$ java -cp Multivalent.jar tool.pdf.Compress lme_v6/300dpi_all.type1c.pdf 
file:/home/kat/mix/trunk/pdfsize/lme_v6/300dpi_all.type1c.pdf, 1420015 bytes
PDF 1.1, producer=pdfTeX-1.40.3, creator=TeX
additional compression may be possible with:
	 -compact -jpeg
=> new length = 1543091, saved -8%, elapsed time = 7 sec
* TODO: get rid of unreachable objects
* TODO: renumber existing objects to gain xref space
* CFF (Compact Font Format):
  Adobe Tech. Note 5176, The CFF (Compact Font Format) Spec., (PDF: 251 KB)
  http://partners.adobe.com/public/developer/en/font/5176.CFF.pdf
  Adobe Tech. Note 5177, Type 2 Charstring Format (PDF: 212 KB)
  http://partners.adobe.com/public/developer/en/font/5177.Type2.pdf
* TODO: embed all fonts (especially base 14); or unembed; which Adobe Reader
  is affected?
* PDF/X-3: Specify -sProcessColorModel=DeviceGray or
  -sProcessColorModel=DeviceCMYK  (DeviceRGB is not allowed).
  (same applies to PDF/A)
* TODO: use /JBIG2Encode for image compression
* gs 8.61 has /JBIG2Decode, but not /JBIG2Encode
* TODO: unify fonts (gs 6.51 -sDEVICE=pdfwrite doesn't do this, keeps two
  /Subtype/Type1C objs in the font dict) 
  * TODO: ignore small mismatches in gs' /Type1C output:
    /BlueScale, /BlueShift, /ForceBold
  * use pdftops to convert /Type1C output of gs back to Type1.
* TODO: unify identical images
  * not much gain with pdftex's output since pdflatex \includegraphics does
    this automatically
  * Multivalent unifies byte-to-byte identical images (``dups''), but
    doesn't bother finding indentically looking images.
  * Multivalent seems to find and eliminate identical subtrees (or just
    content streams??)
    $ java -cp Multivalent.jar tool.pdf.Compress -mon eurotex2006.final.mul5.pdf 
    file:/home/kat/pdfsizeopt/trunk/eurotex2006.final.mul5.pdf, 42027405 bytes
    PDF 1.4, producer=pdfeTeX-1.21a, creator=TeX
    11172 objects / 630 pages pre955 pre1311 pre955 pre1311 pre955 pre1311
    pre955 pre1311 pre955 pre1311, 1540 LZW, 435 /Length IRef, 70 raw samples =
    46374K, 875 embedded Type 1 = 0K, liftPageTree, inline 468, 4881 dups + 1440
    + 1332 + 500 + 124 + 40 + 20
    (divides final file size by 5)
    TODO: what do thos ``embedded Type 1'', ``inline'' etc. mean?
    TODO: what about bookmarks?
* TODO: doc: ghostscript to-/Type1C conversion eliminates subrs; usually no
  problem because /A and /Aacute are nearby, /FlateEncode catches it
* /Filter [ /ASCIIHexDecode /JBIG2Decode ]
  /DecodeParms [ null << /JBIG2Globals 6 0 R >> ]
* when should we /FlateEncode?
  if(fcompress_ && dict.get("Filter") == null && dict.get("Length")
  == null && abyte0.length > FLATE_OVERHEAD + 25)
* JVM .class file format
  http://java.sun.com/docs/books/jvms/second_edition/html/Instructions.doc.html
  http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html
  http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html
  Javassist to mangle the .class file
  cmp -l myload/Foo.class.{privatewho,publicwho}
  229   private:2   public:1
  292 invokespecial:267 invokevirtual:266
* !! why is Comprepp better than Compress on some images (not on
  pts2ep.type1c.pdf anymore?)
* how to edit java code
  * how to disassemble (without offsets)
    javap -c -private tool/pdf/Compress | less
  * how to public recodeImage()
    private --> public: \x00\x02\x02\x79 --> \x00\x01\x02\x79
        (private is \x00\x02)
    invokespecial --> invokevirtual: \x2b\x2c\xb7 --> \x2b\x2c\xb6
        (aload_1 is \x2b, aload_2 is \x2c, invokespecial is \xb7)
  * how to public compress()
    invokespecial --> invokevirtual:
        \xb7\x00\x2e\xb7\x00\x2f --> \xb7\x00\x2e\xb6\x00\x2f
        (invokespecial is \xb7, but we change only the 2nd one (``compress''))
    private --> public:
      ../jdisasm.py tool/pdf/Compress.class private compress
  * how to fix pdfr_;
    private --> public: \x00\x02\x02\x3b --> \x00\x01\x02\x3b
* \cite http://websiteoptimization.com/speed/tweak/pdf/
* how to find embedded glyphs in PDF:
  pdftops type1cconv.tmp.pdf - | perl -ne 'if (/^currentfile eexec$/) { die
  if $N; $N=1 } elsif (/^cleartomark/) { $N=2 } elsif ($N==1) { print }' |
  EexecDecode | perl -ne 'print"$1\n" if m@^(/\S+) \d+ RD @' | sort
* Ghostscript load CFF Type1C font: /MY (t.bin) (r) file /FontSetInit /ProcSet findresource /MY findfont {pop ===} forall
* how to test images are not recompressed with MultivalentLoad:
  $ java -cp Multivalent.jar tool.pdf.Compress pts2.lzw.pdf 
  $ grep /LZWEncode pts2.lzw-o.pdf
  (no match because recompress)
  $ java -ea MultivalentLoad Multivalent.jar tool.pdf.Comprepp pts2.lzw.pdf 
  $ grep /LZWEncode pts2.lzw-o.pdf
  (matches)
